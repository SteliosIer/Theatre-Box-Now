package com.example.myapplication4.data;

import androidx.lifecycle.LiveData;
import androidx.room.Dao;
import androidx.room.Delete;
import androidx.room.Insert;
import androidx.room.Query;
import androidx.room.Update;

import com.example.myapplication4.models.Booking;
import com.example.myapplication4.models.Performance;

import java.util.List;

/**
 * Data Access Object (DAO) for database operations related to Performances and Bookings.
 * Room generates the implementation at compile time based on these annotations.
 */
@Dao
public interface BookingDao {

    // Performance operations
    @Insert
    void insertPerformance(Performance performance);  // Inserts a new Performance into the database

    @Update
    void updatePerformance(Performance performance);  // Updates an existing Performance record

    @Query("SELECT * FROM performances")
    LiveData<List<Performance>> getAllPerformances();  // Returns all Performances as LiveData for UI observation

    @Query("SELECT * FROM performances WHERE id = :id")
    LiveData<Performance> getPerformanceById(int id);  // Returns a specific Performance by ID as LiveData

    @Query("DELETE FROM performances")
    void deleteAllPerformances();  // Deletes all Performance records (Use with caution!)

    // Booking operations
    @Insert
    long insertBooking(Booking booking);  // Inserts a new Booking and returns its autogenerated row ID

    @Delete
    int deleteBooking(Booking booking);  // Deletes a Booking and returns number of rows affected

    @Query("SELECT * FROM bookings WHERE performanceId = :performanceId")
    LiveData<List<Booking>> getBookingsForPerformance(int performanceId);  // Returns all Bookings for a specific Performance

    @Query("SELECT * FROM bookings WHERE customerEmail = :email")
    LiveData<List<Booking>> getBookingsByCustomer(String email);  // Returns all Bookings for a specific customer email

    // Seat availability management
    @Query("UPDATE performances SET availableSeats = availableSeats - :seatsBooked WHERE id = :performanceId")
    int decreaseAvailableSeats(int performanceId, int seatsBooked);  // Reduces available seats when booking is made, returns rows affected

    @Query("UPDATE performances SET availableSeats = availableSeats + :seatsCancelled WHERE id = :performanceId")
    int increaseAvailableSeats(int performanceId, int seatsCancelled);  // Increases available seats when booking is cancelled, returns rows affected
}